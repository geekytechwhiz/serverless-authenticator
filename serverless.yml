service:
  name: authenticator-rest-api
package:
  individually: false

plugins:
  - serverless-offline
  - serverless-domain-manager
  - serverless-deployment-bucket
  - serverless-webpack

provider:
  name: aws
  runtime: nodejs14.x
  stage: ${opt:stage, 'dev'}
  region: ap-south-1
  profile: serverless-admin
  deploymentBucket:
    name: authenticator-rest-apis
    serverSideEncryption: AES256
  environment:
    USERS_TABLE_NAME: ${self:custom.UsersTable.name}
    STAGE: ${opt:stage, 'dev'}
  cors:
    AllowMethods: "'OPTIONS,GET,POST,PUT,DELETE'"
    AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key, X-MIBAPI-CustomerType,X-MIBAPI-Trace-Id,X-MIBAPI-CustomerID,X-MIBAPI-Token,X-MIBAPI-Source,Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
    AllowOrigin: "'*'"
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: arn:aws:dynamodb:ap-south-1:670022476151:table/User-dev
        - Effect: Allow
          Action:
            - s3:PutObject
          Resource: arn:aws:s3:::${self:custom.UsersBucket.name}/*

resources:
  Resources:
    UsersTable: ${file(infra/resources/dynamodb.yml):UsersTable}
    UsersBucket: ${file(infra/resources/s3.yml):UsersBucket}
    UsersBucketPolicy: ${file(infra/resources/s3.yml):UsersBucketPolicy}
    GatewayResponseDefault400:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        ResponseType: DEFAULT_4XX
        ResponseTemplates:
          application/json: '{"error":{"code":"custom-4XX-generic","message":$context.error.messageString},"requestId":"$context.requestId"}'
    GatewayResponseDefault500:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        ResponseType: DEFAULT_5XX
        ResponseTemplates:
          application/json: '{"error":{"code":"custom-5XX-generic","message":$context.error.messageString},"requestId":"$context.requestId"}'
    GatewayResponseAccessDeied:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        ResponseType: ACCESS_DENIED
        ResponseTemplates:
          application/json: '{"error":{"code":"custom-403-access-denied","message":$context.error.messageString},"requestId":"$context.requestId"}'
    GatewayResponseApiConfigurationError:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        ResponseType: API_CONFIGURATION_ERROR
        ResponseTemplates:
          application/json: '{"error":{"code":"custom-500-api-configuration-error","message":$context.error.messageString},"requestId":"$context.requestId"}'
    GatewayResponseAuthorizerConfigurationError:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        ResponseType: AUTHORIZER_CONFIGURATION_ERROR
        ResponseTemplates:
          application/json: '{"error":{"code":"custom-500-authorizer-configuration-error","message":$context.error.messageString},"requestId":"$context.requestId"}'
    GatewayResponseAuthorizerFailure:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        ResponseType: AUTHORIZER_FAILURE
        ResponseTemplates:
          application/json: '{"error":{"code":"custom-500-authorizer-failure","message":$context.error.messageString},"requestId":"$context.requestId"}'
    GatewayResponseBadRequestBody:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        ResponseType: BAD_REQUEST_BODY
        ResponseTemplates:
          application/json: '{"error":{"code":"custom-400-bad-request-body","message":$context.error.messageString},"requestId":"$context.requestId"}'
    GatewayResponseBadRequestParameters:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        ResponseType: BAD_REQUEST_PARAMETERS
        ResponseTemplates:
          application/json: '{"error":{"code":"custom-400-bad-request-parameters","message":$context.error.messageString},"requestId":"$context.requestId"}'
    GatewayResponseExpiredToken:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        ResponseType: EXPIRED_TOKEN
        ResponseTemplates:
          application/json: '{"error":{"code":"custom-403-expired-token","message":$context.error.messageString},"requestId":"$context.requestId"}'
    GatewayResponseIntegrationFailure:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        ResponseType: INTEGRATION_FAILURE
        ResponseTemplates:
          application/json: '{"error":{"code":"custom-504-integration-failure","message":$context.error.messageString},"requestId":"$context.requestId"}'
    GatewayResponseIntegrationTimeout:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        ResponseType: INTEGRATION_TIMEOUT
        ResponseTemplates:
          application/json: '{"error":{"code":"custom-504-integration-timeout","message":$context.error.messageString},"requestId":"$context.requestId"}'
    GatewayResponseInvalidApiKey:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        ResponseType: INVALID_API_KEY
        ResponseTemplates:
          application/json: '{"error":{"code":"custom-403-invalid-api-key","message":$context.error.messageString},"requestId":"$context.requestId"}'
    GatewayResponseInvalidSignature:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        ResponseType: INVALID_SIGNATURE
        ResponseTemplates:
          application/json: '{"error":{"code":"custom-403-invalid-signature","message":$context.error.messageString},"requestId":"$context.requestId"}'
    GatewayResponseMissingAuthenticationToken:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        ResponseType: MISSING_AUTHENTICATION_TOKEN
        ResponseTemplates:
          application/json: '{"error":{"code":"custom-403-missing-authentication-token","message":$context.error.messageString},"requestId":"$context.requestId"}'
    GatewayResponseQuotaExceeded:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        ResponseType: QUOTA_EXCEEDED
        ResponseTemplates:
          application/json: '{"error":{"code":"custom-429-quota-exceeded","message":$context.error.messageString},"requestId":"$context.requestId"}'
    GatewayResponseRequestTooLarge:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        ResponseType: REQUEST_TOO_LARGE
        ResponseTemplates:
          application/json: '{"error":{"code":"custom-413-request-too-large","message":$context.error.messageString},"requestId":"$context.requestId"}'
    GatewayResponseResourceNotFound:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        ResponseType: RESOURCE_NOT_FOUND
        ResponseTemplates:
          application/json: '{"error":{"code":"custom-404-resource-not-found","message":$context.error.messageString},"requestId":"$context.requestId"}'
    GatewayResponseThrottled:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        ResponseType: THROTTLED
        ResponseTemplates:
          application/json: '{"error":{"code":"custom-429-throttled","message":$context.error.messageString},"requestId":"$context.requestId"}'
    GatewayResponseUnauthorized:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        ResponseType: UNAUTHORIZED
        ResponseTemplates:
          application/json: '{"error":{"code":"custom-401-unauthorized","message":$context.error.messageString},"requestId":"$context.requestId"}'
    GatewayResponseUnauthorizedMediType:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        ResponseType: UNSUPPORTED_MEDIA_TYPE
        ResponseTemplates:
          application/json: '{"error":{"code":"custom-415-unsupported-media-type","message":$context.error.messageString},"requestId":"$context.requestId"}'
    #### Gateway Response END

functions:
  verify-token:
    handler: app/handlers/authorize.handler
  send-sms:
    handler: app/functions/twilioSms.sendSms
  register:
    handler: app/handlers/register.handler
    events:
      - http:
          method: POST
          path: /register
          cors:
            origin: '*'
            AllowMethods: "'OPTIONS,GET,POST'"
            allowCredentials: false
  update-user:
    handler: app/handlers/updateUser.handler
    events:
      - http:
          method: PATCH
          path: /register
          cors:
            origin: '*'
            AllowMethods: "'OPTIONS,GET,POST'"
            allowCredentials: false
  login:
    handler: app/handlers/login.handler
    events:
      - http:
          method: POST
          path: /login
          cors:
            origin: '*'
            AllowMethods: "'OPTIONS,GET,POST'"
            headers:
              - X-MIBAPI-CustomerType
              - X-MIBAPI-Trace-Id
              - X-MIBAPI-CustomerID
              - X-MIBAPI-Token
              - X-MIBAPI-Source
              - Content-Type
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Access-Control-Allow-Headers
              - Access-Control-Allow-Origin
            allowCredentials: false
  getHealthCheck:
    handler: app/handlers/health.get
    events:
      - http:
          path: /health
          method: get
          cors:
            origin: '*'
            AllowMethods: "'OPTIONS,GET,POST,PUT,DELETE'"
            headers:
              - Content-Type
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-MIBAPI-CustomerType
              - X-MIBAPI-Trace-Id
              - X-MIBAPI-CustomerID
              - X-MIBAPI-Token
              - X-MIBAPI-Source
              - Access-Control-Allow-Headers
              - Access-Control-Allow-Origin
            allowCredentials: false

  generate-otp:
    handler: app/handlers/generateOTP.handler
    description: Send verification OTP using twilio service.
    memorySize: 1024
    timeout: 5
    events:
      - http:
          path: generate-otp
          method: post
          integration: lambda
          cors: true
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"
  verify-otp:
    handler: app/handlers/verifyOtp.handler
    description: verify OTP.
    memorySize: 1024
    timeout: 5
    events:
      - http:
          path: verify-otp
          method: post
          integration: lambda
          cors: true
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"
  healthCheckPost:
    handler: app/handlers/health.post
    events:
      - http:
          path: /health
          method: post
          cors:
            origin: '*'
            AllowMethods: "'OPTIONS,GET,POST,PUT,DELETE'"
            headers:
              - Content-Type
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-MIBAPI-CustomerType
              - X-MIBAPI-Trace-Id
              - X-MIBAPI-CustomerID
              - X-MIBAPI-Token
              - X-MIBAPI-Source
              - Access-Control-Allow-Headers
              - Access-Control-Allow-Origin
            allowCredentials: false
          # authorizer:
          #   name: verify-token
          #   identitySource: method.request.header.Authorization
          #   resultTtlInSeconds: 3600
custom:
  stage: dev
  webpack:
    keepOutputDirectory: true
    includeModules:
      packagePath: './package.json'
    webpackConfig: 'webpack.config.js'
    packager: 'npm'
    excludeFiles: src/**/*.test.js

  domains:
    dev: api.dev.migobucks.com
    # prod: api.migobucks.com
  UsersTable:
    name: !Ref UsersTable
    arn: !GetAtt UsersTable.Arn
  UsersBucket:
    name: authenticator-rest-apis-${self:provider.stage}
  customDomain:
    domainName: ${self:custom.domains.${self:custom.stage}}
    basePath: 'authorizer'
    stage: dev
    createRoute53Record: true
